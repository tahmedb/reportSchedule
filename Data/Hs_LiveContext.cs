// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ReportScheduler;

#nullable disable

namespace ReportScheduler.Data
{
    public partial class Hs_LiveContext : DbContext
    {
        

        public Hs_LiveContext(DbContextOptions<Hs_LiveContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CompanyReport> CompanyReport { get; set; }
        public virtual DbSet<CompanyReportColumnConfiguration> CompanyReportColumnConfiguration { get; set; }
        public virtual DbSet<CompanyReportFilterConfiguration> CompanyReportFilterConfiguration { get; set; }
        public virtual DbSet<ReportColumn> ReportColumn { get; set; }
        public virtual DbSet<ReportDataSet> ReportDataSet { get; set; }
        public virtual DbSet<ReportFilter> ReportFilter { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                //optionsBuilder.UseSqlServer("Data Source=DESKTOP-3GMQEAA\\SQLEXPRESS;Initial Catalog=1hs_live;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<CompanyReport>(entity =>
            {
                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name).IsRequired();

                entity.Property(e => e.Version)
                    .IsRequired()
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ReportDataSet)
                    .WithMany(p => p.CompanyReport)
                    .HasForeignKey(d => d.ReportDataSetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CompanyReport_ReportDataSetId");
            });

            modelBuilder.Entity<CompanyReportColumnConfiguration>(entity =>
            {
                entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.CompanyReport)
                    .WithMany(p => p.CompanyReportColumnConfiguration)
                    .HasForeignKey(d => d.CompanyReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CompanyReportColumnConfiguration_CompanyReportId");

                entity.HasOne(d => d.ReportColumn)
                    .WithMany(p => p.CompanyReportColumnConfiguration)
                    .HasForeignKey(d => d.ReportColumnId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CompanyReportColumnConfiguration_ReportColumnId");
            });

            modelBuilder.Entity<CompanyReportFilterConfiguration>(entity =>
            {
                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Operator).IsRequired();

                entity.Property(e => e.Value).IsRequired();

                entity.HasOne(d => d.CompanyReport)
                    .WithMany(p => p.CompanyReportFilterConfiguration)
                    .HasForeignKey(d => d.CompanyReportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CompanyReportFilterConfiguration_CompanyReportId");

                entity.HasOne(d => d.ReportFilter)
                    .WithMany(p => p.CompanyReportFilterConfiguration)
                    .HasForeignKey(d => d.ReportFilterId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CompanyReportFilterConfiguration_ReportFilterId");
            });

            modelBuilder.Entity<ReportColumn>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.DisplayName).IsRequired();

                entity.Property(e => e.Name).IsRequired();

                entity.HasOne(d => d.ReportDataSet)
                    .WithMany(p => p.ReportColumn)
                    .HasForeignKey(d => d.ReportDataSetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportColumn_ReportDataSetId");
            });

            modelBuilder.Entity<ReportDataSet>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.DisplayName).IsRequired();

                entity.Property(e => e.Name).IsRequired();
            });

            modelBuilder.Entity<ReportFilter>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.DisplayName).IsRequired();

                entity.Property(e => e.Name).IsRequired();

                entity.HasOne(d => d.ReportDataSet)
                    .WithMany(p => p.ReportFilter)
                    .HasForeignKey(d => d.ReportDataSetId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportFilter_ReportDataSetId");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}